heat_template_version: '2015-04-30'

description: Template to deploy 1 node that can be a standalone or login node

parameters:

  key_name:
    default: keytest1
    type: string
    description: Name of an existing key pair to use for the instances
    constraints:
      - custom_constraint: nova.keypair
        description: Must name a public key (pair) known to Nova

  flavor:
    type: string
    description: Flavor for the instances to be created
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a flavor known to Nova
    default: "m1.small"

  image:
    type: string
    description: >
      Name or ID of the image to use for the instances.
      You can get the default from
    constraints:
      - custom_constraint: glance.image
        description: Must identify an image known to Glance
    default: "Flight Solo 2022.4"

  public_net:
    type: string
    description: >
      ID of public network for which floating IP addresses will be allocated

  disk_size:
    default: 20
    type: number
    description: The disk/volume size of the vm.

  cloud_config:
    type: string
    description: Cloud config to be passed to node.

resources:

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: {get_param: public_net}}
      name: 
        list_join: ['-', [ {get_param: OS::stack_name }, 'router']]

  network:
    type: OS::Neutron::Net
    properties:
      name:
        list_join: ['-', [ {get_param: OS::stack_name }, 'network']]

  subnet:
    type: OS::Neutron::Subnet
    properties:
      name:
        list_join: ['-', [ {get_param: OS::stack_name }, 'subnet']]
      network_id: { get_resource: network }
      cidr: 99.99.0.0/16
      gateway_ip: 99.99.0.1
      allocation_pools: 
        - {end: 99.99.0.150, start: 99.99.0.10}
      dns_nameservers:
        - 8.8.8.8

  router_interface:
    depends_on: [ network, router ]
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  cluster-sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name: 
        list_join: ['-', [ {get_param: OS::stack_name }, 'sg']]
      rules:
        - direction: egress
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          remote_ip_prefix: 99.99.0.0/16
        - direction: ingress
          protocol: icmp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          port_range_min: 22
          port_range_max: 22
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          port_range_min: 80
          port_range_max: 80
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          port_range_min: 8888
          port_range_max: 8888
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          port_range_min: 443
          port_range_max: 443
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          port_range_min: 5901
          port_range_max: 5911
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          remote_ip_prefix: 99.99.0.0/16


  standalone_port:
    properties:
      network: { get_resource: network }
      security_groups:
            - { get_resource: cluster-sg }
      name: 
        list_join: ['-', [ {get_param: OS::stack_name }, 'port']]
    type: OS::Neutron::Port

  head:
    depends_on: [ router_interface, cluster-sg, standalone_port ]
    properties:
      name: 
        list_join: ['-', [ {get_param: OS::stack_name }, 'head']]
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      networks:
      - port:
          get_resource: standalone_port
      block_device_mapping:
        - device_name: vda
          volume_id: { get_resource: standalone_volume }
          delete_on_termination: true
      user_data_format: RAW
      user_data: { get_param: cloud_config }
    type: OS::Nova::Server


  standalone_volume:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: ['-', [ {get_param: OS::stack_name }, 'volume']]
      size: { get_param: disk_size }
      image: { get_param: image }


  standalone_floating_ip:
    depends_on: [ router_interface, standalone_port ]
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: standalone_port }

outputs:
  standalone_ip:
    description: The private IP address of the standalone node
    value: { get_attr: [head, first_address] }
  standalone_public_ip:
    description: Floating IP address of standalone node
    value: { get_attr: [ standalone_floating_ip, floating_ip_address ] }
